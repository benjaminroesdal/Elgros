@inject LocalStorageService localStorageService
@inject NavigationManager main
@inject StateContainer stateContainer
@page "/Basket"
@using ElgrosWeb.Client.Services;

<h3>Indkøbskurv</h3>
<MudDataGrid Items="@stateContainer.BasketItems">
    <Columns>
        <TemplateColumn>
            <CellTemplate>
                <MudImage Src="@context.Item.Product.Image" Width="100" Height="100" Alt="Item image" Elevation="25" Class="rounded-lg" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Product.Name" Title="Navn" />
        <PropertyColumn Property="x => x.Product.Brand" />
        <PropertyColumn Property="x => x.Product.Category" />
        <PropertyColumn Title="Price Pr" Property="x => x.Product.Price" />
        <TemplateColumn Title="Total">
            <CellTemplate>
                <MudText>
                    @{
                        double accumulatedPrice = 0;
                        accumulatedPrice = context.Item.Product.Price * context.Item.Quantity;
                    }
                    @accumulatedPrice
                </MudText>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudPaper Class="d-flex" Elevation="0">
                    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="() => AddToBasket(context.Item.Product)" />
                    <MudText>@context.Item.Quantity</MudText>
                    <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" OnClick="() => RemoveFromBasket(context.Item.Product.Id)" Disabled="context.Item.Quantity == 1" />
                </MudPaper>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudFab OnClick="() => ClearItemFromBasket(context.Item.Product.Id)" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Disabled="false" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <FooterTemplate>
                <MudText Typo="Typo.h5">Total</MudText>
                <MudText Typo="Typo.h6">@SetTotalCostOfBasket()</MudText>
                <MudText Typo="Typo.h5">Heraf moms</MudText>
                <MudText Typo="Typo.h6">@GetTotalSalesTax()</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnOrderClick" Disabled="!stateContainer.BasketItems.Any()">Gå til kassen</MudButton>
            </FooterTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    double totalBasketPrice;

    protected override void OnInitialized()
    {
        stateContainer.OnChange += StateHasChanged;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var items = await localStorageService.TryGetLocalStorage();
            if (items != null && items.Any())
            {
                stateContainer.BasketItems = items;
            }
            StateHasChanged();
        }
    }

    public async void AddToBasket(ProductModel product)
    {
        await localStorageService.AddToBasket(product);
        StateHasChanged();
    }

    public async void RemoveFromBasket(int itemId)
    {
        await localStorageService.RemoveFromBasket(itemId);
        StateHasChanged();
    }

    public async void ClearItemFromBasket(int itemId)
    {
        await localStorageService.ClearItemFromBasket(itemId);
        StateHasChanged();
    }

    public void OnOrderClick()
    {
        main.NavigateTo("Order");
    }

    public async void ClearBasket()
    {
        await localStorageService.ClearBasket();
        StateHasChanged();
    }

    public double SetTotalCostOfBasket()
    {
        double total = 0d;
        foreach (var item in stateContainer.BasketItems)
        {
            total = total + item.Product.Price * item.Quantity;
        }
        totalBasketPrice = total;
        return totalBasketPrice;
    }

    public double GetTotalSalesTax()
    {
        var totalTaxAmount = ((double)totalBasketPrice / 100) * 25;
        return Math.Round(totalTaxAmount, 2, MidpointRounding.AwayFromZero);
    }
}
